From 71d47319059ffc1388590419be6715298811a04a Mon Sep 17 00:00:00 2001
From: Brian Bouterse <bmbouter@gmail.com>
Date: Wed, 29 Sep 2021 15:00:30 -0400
Subject: [PATCH] Adds Secure Proxy support to aiohttp

---
 aiohttp/client_reqrep.py |  2 --
 aiohttp/connector.py     | 39 +++++++++++++++++++++++++--------------
 2 files changed, 25 insertions(+), 16 deletions(-)

diff --git a/aiohttp/client_reqrep.py b/aiohttp/client_reqrep.py
index d826bfeb..45198dd4 100644
--- a/aiohttp/client_reqrep.py
+++ b/aiohttp/client_reqrep.py
@@ -547,8 +547,6 @@ class ClientRequest:
         proxy_auth: Optional[BasicAuth],
         proxy_headers: Optional[LooseHeaders],
     ) -> None:
-        if proxy and not proxy.scheme == "http":
-            raise ValueError("Only http proxies are supported")
         if proxy_auth and not isinstance(proxy_auth, helpers.BasicAuth):
             raise ValueError("proxy_auth must be None or BasicAuth() tuple")
         self.proxy = proxy
diff --git a/aiohttp/connector.py b/aiohttp/connector.py
index 748b22a4..88f7d4e7 100644
--- a/aiohttp/connector.py
+++ b/aiohttp/connector.py
@@ -1107,7 +1107,11 @@ class TCPConnector(BaseConnector):
             try:
                 protocol = conn._protocol
                 assert protocol is not None
-                protocol.set_response_params()
+
+                # read_until_eof=True will ensure the connection isn't closed
+                # once the response is received and processed allowing
+                # START_TLS to work on the connection below.
+                protocol.set_response_params(read_until_eof=True)
                 resp = await proxy_resp.start(conn)
             except BaseException:
                 proxy_resp.close()
@@ -1128,22 +1132,29 @@ class TCPConnector(BaseConnector):
                             message=message,
                             headers=resp.headers,
                         )
-                    rawsock = transport.get_extra_info("socket", default=None)
-                    if rawsock is None:
-                        raise RuntimeError("Transport does not expose socket instance")
-                    # Duplicate the socket, so now we can close proxy transport
-                    rawsock = rawsock.dup()
-                finally:
+                except BaseException:
+                    # It shouldn't be closed in finally because it's fed to `loop.start_tls()`
+                    # and the docs say not to touch it after passing there.
                     transport.close()
-
-                transport, proto = await self._wrap_create_connection(
-                    self._factory,
-                    timeout=timeout,
-                    ssl=sslcontext,
-                    sock=rawsock,
+                    raise
+
+                setattr(
+                    transport, "_start_tls_compatible", True
+                )  # for https://github.com/python/cpython/pull/28073
+                # Wrap the raw TCP transport with TLS:
+                tls_proto = self._factory()
+                tls_transport = await self._loop.start_tls(
+                    # Access the old transport last time before it's closed and forgotten forever:
+                    transport,
+                    tls_proto,  # Create a brand new proto for TLS
+                    sslcontext,
                     server_hostname=req.host,
-                    req=req,
+                    ssl_handshake_timeout=timeout.total,
                 )
+                tls_proto.connection_made(
+                    tls_transport
+                )  # Kick the state machine of the new TLS protocol
+                return tls_transport, tls_proto
             finally:
                 proxy_resp.close()
 
-- 
2.31.1

